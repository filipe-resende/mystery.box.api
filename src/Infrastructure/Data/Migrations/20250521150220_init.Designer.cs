// <auto-generated />
using System;
using Infrastructure.Data.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250521150220_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardFirstSix")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CardHolderName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CardLastFour")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ExternalReference")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullResponseJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Installments")
                        .HasColumnType("int");

                    b.Property<long>("MercadoPagoPaymentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("PayerDocumentNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PayerDocumentType")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PayerEmail")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PaymentMethodId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentTypeId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusDetail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payment", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("97f1f9f2-cd2e-41c4-b470-51f6be5b1f8b"),
                            Amount = 5000m,
                            ApprovedAt = new DateTime(2024, 1, 1, 12, 1, 0, 0, DateTimeKind.Utc),
                            CardFirstSix = "123456",
                            CardHolderName = "Teste Da Silva",
                            CardLastFour = "12346",
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            CreatedOn = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            ExternalReference = "REF-001",
                            FullResponseJson = "{}",
                            Installments = 1,
                            MercadoPagoPaymentId = 123456789L,
                            NetAmount = 4900m,
                            PayerDocumentNumber = "12345678900",
                            PayerDocumentType = "CPF",
                            PayerEmail = "cliente@teste.com",
                            PaymentMethodId = "pix",
                            PaymentTypeId = "pix",
                            ReleaseDate = new DateTime(2024, 1, 3, 12, 1, 0, 0, DateTimeKind.Utc),
                            Status = "approved",
                            StatusDetail = "accredited",
                            UpdateAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = new Guid("a85a95bd-9448-4945-b621-9f5b6b75e329")
                        });
                });

            modelBuilder.Entity("Domain.Entities.PurchaseHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SteamCardCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.HasIndex("SteamCardCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("PurchaseHistory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("475925bb-8bf1-4cfa-8b3b-42b16dcbe0e5"),
                            PaymentId = new Guid("97f1f9f2-cd2e-41c4-b470-51f6be5b1f8b"),
                            Quantity = 1m,
                            Status = "Pending",
                            SteamCardCategoryId = new Guid("d54c727f-e6de-4d0f-a3f8-f102061b300a"),
                            UnitPrice = 19m,
                            UserId = new Guid("a85a95bd-9448-4945-b621-9f5b6b75e329")
                        });
                });

            modelBuilder.Entity("Domain.Entities.SteamCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("SteamCardCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SteamCardCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("SteamCard", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9f75c8d-3d83-4eaf-8487-9eaa1b3b46ed"),
                            Active = true,
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Chave ativável no Steam",
                            Key = "STEAM-XYZ-123",
                            Name = "Cartão R$50 - Código XYZ",
                            Status = 0,
                            SteamCardCategoryId = new Guid("d54c727f-e6de-4d0f-a3f8-f102061b300a"),
                            UserId = new Guid("a85a95bd-9448-4945-b621-9f5b6b75e329")
                        });
                });

            modelBuilder.Entity("Domain.Entities.SteamCardCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("UnitPrice")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("SteamCardCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d54c727f-e6de-4d0f-a3f8-f102061b300a"),
                            Active = true,
                            CategoryId = "electronics",
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cartão Steam de R$50",
                            PictureUrl = "/img/games/1.jpg",
                            Title = "Basic",
                            UnitPrice = 29.99f
                        },
                        new
                        {
                            Id = new Guid("d54c727f-e6de-4d0f-a3f8-f102061b300b"),
                            Active = true,
                            CategoryId = "electronics",
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cartão Steam de R$50",
                            PictureUrl = "/img/games/2.jpg",
                            Title = "Premiun",
                            UnitPrice = 49.99f
                        },
                        new
                        {
                            Id = new Guid("d54c727f-e6de-4d0f-a3f8-f102061b300c"),
                            Active = true,
                            CategoryId = "electronics",
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cartão Steam de R$50",
                            PictureUrl = "/img/games/3.jpg",
                            Title = "Master",
                            UnitPrice = 89.99f
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a85a95bd-9448-4945-b621-9f5b6b75e329"),
                            Active = true,
                            CreatedAt = new DateTime(2024, 1, 1, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@email.com",
                            LastName = "Castro",
                            Name = "Filipe",
                            Password = "$2a$11$acG/4uZ/MTcq2rJwE/nwbuHKS1FvUQBM.mEQrEr1qQ.A6lzjLyRzm",
                            Phone = "31999999999",
                            Role = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.PurchaseHistory", b =>
                {
                    b.HasOne("Domain.Entities.Payment", "Payment")
                        .WithMany("PurchaseHistories")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SteamCardCategory", "SteamCardCategory")
                        .WithMany()
                        .HasForeignKey("SteamCardCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");

                    b.Navigation("SteamCardCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SteamCard", b =>
                {
                    b.HasOne("Domain.Entities.SteamCardCategory", "SteamCardCategory")
                        .WithMany()
                        .HasForeignKey("SteamCardCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("SteamCards")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("SteamCardCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.OwnsOne("Domain.Entities.Identification", "Identification", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("IdentificationNumber");

                            b1.Property<string>("Type")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("IdentificationType");

                            b1.HasKey("UserId");

                            b1.ToTable("User");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.HasData(
                                new
                                {
                                    UserId = new Guid("a85a95bd-9448-4945-b621-9f5b6b75e329"),
                                    Number = "12345678900",
                                    Type = "CPF"
                                });
                        });

                    b.Navigation("Identification")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Payment", b =>
                {
                    b.Navigation("PurchaseHistories");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("SteamCards");
                });
#pragma warning restore 612, 618
        }
    }
}
